package no.hyper.memoryorm.operation;

import android.content.Context;
import android.database.Cursor;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;

import no.hyper.memoryorm.DbManager;
import no.hyper.memoryorm.builder.QueryBuilder;
import no.hyper.memoryorm.helper.ObjectHelper;

/**
 * Created by jean on 14.11.2016.
 */

public class FetchOperation {

    /**
     * fetch all the row of the table
     * @param context the android context
     * @param classType: the class corresponding to the table where rows should be fetched
     * @param condition: WHERE condition, example: "id=3". Can be null
     * @param <T> type of the entity to fetch
     * @return a list containing all the object saved in the table
     */
    public static <T> List<T> fetchAll(DbManager db, Context context, Class<T> classType, String condition)
            throws IOException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Cursor cursor = db.rawQuery(getFetchAllRequest(classType.getSimpleName(), condition), null);
        if (cursor == null || cursor.getCount() <= 0) return null;

        cursor.moveToFirst();
        boolean next;
        List<T> entities = new ArrayList<>();

        do {
            T entity = ObjectHelper.getEntity(db, context, classType, cursor);
            entities.add(entity);
            next = cursor.moveToNext();
        } while (next);
        cursor.close();
        return entities;
    }

    /**
     * fetch all the row of the table and return the first
     * @param context the android context
     * @param classType: the class corresponding to the table where rows should be fetched
     * @param condition: WHERE condition, example: "id=3". Can be null
     * @param <T> type of the entity to fetch
     * @return the first object saved in the table
     */
    public static <T> T fetchFirst(DbManager db, Context context, Class<T> classType, String condition)
            throws IOException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Cursor cursor = db.rawQuery(getFetchAllRequest(classType.getSimpleName(), condition), null);
        if (cursor == null || cursor.getCount() <= 0) return null;
        cursor.moveToFirst();
        T entity = ObjectHelper.getEntity(db, context, classType, cursor);
        cursor.close();
        return entity;
    }

    /**
     * fetch the row of the table that has the corresponding ID than the one provided
     * @param context the android context
     * @param classType: the class corresponding to the table where rows should be fetched
     * @param <T> type of the entity to fetch
     * @param id: the id to look for
     * @return the object saved in db with the corresponding id
     */
    public static <T> T fetchById(DbManager db, Context context, Class<T> classType, String id)
            throws IOException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Cursor cursor = db.rawQuery(getFetchByIdRequest(classType.getSimpleName(), id), null);
        if (cursor == null || cursor.getCount() <= 0) return null;

        cursor.moveToFirst();
        T entity = ObjectHelper.getEntity(db, context, classType, cursor);
        cursor.close();
        return entity;
    }

    /**
     * fetch the row of the table that is at the corresponding row id than the one provided
     * @param context the android context
     * @param classType: the class corresponding to the table where rows should be fetched
     * @param id: the row id to look for
     * <p>The row id or ROWID is an hidden field generated by Sqlite for each row of every table. It correspond to
     * a long value.</p>
     * @param <T> type of the entity to fetch
     * @return the object saved in the db with the corresponding rowid
     */
    public static <T> T fetchByRowId(DbManager db, Context context, Class<T> classType, long id)
            throws IOException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Cursor cursor = db.rawQuery(getFetchByRowIdRequest(classType.getSimpleName(), id), null);
        if (cursor == null || cursor.getCount() <= 0) return null;

        cursor.moveToFirst();
        T entity = ObjectHelper.getEntity(db, context, classType, cursor);
        cursor.close();
        return entity;
    }

    /**
     * fetch all the row of a table and return the number of items in the cursor
     * @param tableName the name of the table that is counted
     * @return the number of row in the cursor
     */
    public static Integer getTableCount(DbManager db, String tableName) {
        Cursor cursor = db.rawQuery(getFetchAllRequest(tableName, null), null);
        return cursor.getCount();
    }

    private static String getFetchAllRequest(String table, String condition) {
        return new QueryBuilder()
                .select()
                .from(table)
                .where(condition)
                .toSqlRequest();
    }

    private static String getFetchByIdRequest(String table, String id) {
        return new QueryBuilder()
                .select()
                .from(table)
                .where("id=" + id)
                .toSqlRequest();
    }

    private static String getFetchByRowIdRequest(String table, long rowId) {
        return new QueryBuilder()
                .select()
                .from(table)
                .where("ROWID=" + rowId)
                .toSqlRequest();
    }

}
